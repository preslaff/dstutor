lesson:
  id: "pandas_01"
  level: "beginner"
  topic: "pandas"
  subtopic: "Series Basics"
  order: 1

  metadata:
    duration: "15 min"
    difficulty: "easy"
    prerequisites: []
    learning_objectives:
      - "Understand what a Pandas Series is"
      - "Create Series from lists and dictionaries"
      - "Access Series elements by index"
      - "Understand Series vs NumPy arrays"

  content:
    introduction: |
      # Pandas Series - 1D Labeled Data

      Welcome to Pandas! Series is the foundational 1D data structure - think of it as
      a supercharged NumPy array with labels.

      **What you'll learn:**
      - What a Series is and why it's useful
      - Create Series from different data sources
      - Index and access data
      - Basic Series operations

    concept: |
      ## What is a Pandas Series?

      A **Series** is a one-dimensional labeled array that can hold any data type.

      **Key Features:**
      - **Labeled Index**: Each value has a label (like a dictionary)
      - **Homogeneous**: All values same data type (like NumPy)
      - **Size Immutable**: Can't change length after creation
      - **Value Mutable**: Can change values

      **Series = Values + Index**
      ```
      Index    Values
      -----    ------
      0    →    100
      1    →    200
      2    →    300
      ```

      **Why Use Series?**
      - 🏷️ Labeled data (meaningful indices)
      - 🔍 Automatic alignment in operations
      - 🛠️ Rich functionality for data manipulation
      - 📊 Integrates seamlessly with DataFrames

    examples:
      - title: "Creating a Series"
        code: |
          import pandas as pd
          import numpy as np

          # From a list
          s1 = pd.Series([10, 20, 30, 40, 50])
          print("From list:")
          print(s1)
          print()

          # With custom index
          s2 = pd.Series([10, 20, 30], index=['a', 'b', 'c'])
          print("With custom index:")
          print(s2)
          print()

          # From a dictionary
          s3 = pd.Series({'Alice': 85, 'Bob': 92, 'Charlie': 78})
          print("From dictionary:")
          print(s3)

        output: |
          From list:
          0    10
          1    20
          2    30
          3    40
          4    50
          dtype: int64

          With custom index:
          a    10
          b    20
          c    30
          dtype: int64

          From dictionary:
          Alice      85
          Bob        92
          Charlie    78
          dtype: int64

      - title: "Accessing Series Elements"
        code: |
          import pandas as pd

          scores = pd.Series([85, 92, 78, 95],
                             index=['Alice', 'Bob', 'Charlie', 'David'])

          print("Full Series:")
          print(scores)
          print()

          # Access by label
          print("Bob's score:", scores['Bob'])

          # Access by position
          print("First score:", scores[0])

          # Multiple elements
          print("\nFirst two:")
          print(scores[['Alice', 'Bob']])

          # Slicing
          print("\nSlice [1:3]:")
          print(scores[1:3])

        output: |
          Full Series:
          Alice      85
          Bob        92
          Charlie    78
          David      95
          dtype: int64

          Bob's score: 92
          First score: 85

          First two:
          Alice    85
          Bob      92
          dtype: int64

          Slice [1:3]:
          Bob        92
          Charlie    78
          dtype: int64

      - title: "Series Operations"
        code: |
          import pandas as pd

          prices = pd.Series([10.5, 20.0, 15.75, 30.25])

          print("Original prices:")
          print(prices)

          # Vectorized operations
          print("\nWith 10% discount:")
          print(prices * 0.9)

          # Boolean indexing
          print("\nPrices > 15:")
          print(prices[prices > 15])

          # Statistical methods
          print("\nMean price:", prices.mean())
          print("Max price:", prices.max())

        output: |
          Original prices:
          0    10.50
          1    20.00
          2    15.75
          3    30.25
          dtype: float64

          With 10% discount:
          0     9.45
          1    18.00
          2    14.175
          3    27.225
          dtype: float64

          Prices > 15:
          1    20.00
          3    30.25
          dtype: float64

          Mean price: 19.125
          Max price: 30.25

  exercise:
    title: "Create a Series of Temperatures"

    instruction: |
      Create a Pandas Series representing temperatures for different cities:
      - London: 15
      - Paris: 18
      - Berlin: 12
      - Madrid: 22

      Store the result in a variable called `result`.

      **Requirements:**
      - Use city names as the index
      - Values should be the temperatures

    setup_code: |
      import pandas as pd

    starter_code: |
      # Your code here
      result =

    solution: |
      result = pd.Series([15, 18, 12, 22],
                         index=['London', 'Paris', 'Berlin', 'Madrid'])

    validation:
      type: "type_check"
      expected_type: "Series"

    hints:
      - level: 1
        text: |
          Use pd.Series() with two arguments: a list of values and a list of index labels.
          pd.Series([values], index=['labels'])

      - level: 2
        text: |
          result = pd.Series([15, 18, 12, 22],
                             index=['London', 'Paris', 'Berlin', 'Madrid'])

      - level: 3
        code: |
          result = pd.Series([15, 18, 12, 22],
                             index=['London', 'Paris', 'Berlin', 'Madrid'])

  follow_up:
    challenges:
      - "Create a Series from a dictionary"
      - "Access a specific city's temperature"
      - "Find cities with temp > 15"
      - "Calculate the average temperature"

    next_lesson: "pandas_02"

    additional_resources:
      - title: "Pandas Series Documentation"
        url: "https://pandas.pydata.org/docs/reference/series.html"
