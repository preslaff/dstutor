lesson:
  id: "matplotlib_06"
  level: "intermediate"
  topic: "matplotlib"
  subtopic: "Heatmaps and Correlation Matrices"
  order: 6

  metadata:
    duration: "25 min"
    difficulty: "medium"
    prerequisites: ["matplotlib_01", "pandas_02", "numpy_06"]
    learning_objectives:
      - "Create heatmaps to visualize 2D data"
      - "Visualize correlation matrices"
      - "Customize color maps and annotations"
      - "Interpret heatmap patterns"

  content:
    introduction: |
      # Heatmaps and Correlation Matrices

      See patterns at a glance! Heatmaps transform tables of numbers into intuitive
      color-coded visualizations, perfect for finding relationships and patterns.

      **What you'll learn:**
      - Creating heatmaps with seaborn
      - Correlation matrix visualization
      - Color map selection
      - Adding value annotations

    concept: |
      ## Visualizing 2D Data with Color

      **1. Basic Heatmap with Seaborn**

      ```python
      import seaborn as sns
      sns.heatmap(data, annot=True, cmap='coolwarm')
      ```

      **Key Parameters:**
      - `annot=True` - Show values in cells
      - `cmap` - Color map (e.g., 'coolwarm', 'viridis', 'YlGnBu')
      - `fmt` - Number format (e.g., '.2f', 'd')
      - `linewidths` - Space between cells
      - `vmin, vmax` - Color scale limits
      - `center` - Value to center color map (useful for diverging maps)

      **2. Correlation Matrix**

      Visualize relationships between variables:
      ```python
      corr = df.corr()
      sns.heatmap(corr, annot=True, cmap='coolwarm', center=0)
      ```

      **Correlation values:**
      - +1: Perfect positive correlation
      - 0: No correlation
      - -1: Perfect negative correlation

      **3. Common Color Maps**

      **Sequential** (low to high):
      - 'YlGnBu', 'YlOrRd', 'Blues', 'Greens', 'Reds'

      **Diverging** (centered around middle):
      - 'coolwarm', 'RdBu', 'RdYlGn', 'seismic'
      - Use `center=0` for correlation matrices

      **Perceptually uniform**:
      - 'viridis', 'plasma', 'inferno', 'magma'

      **4. Customization Tips**

      ```python
      sns.heatmap(data,
                  annot=True,           # Show numbers
                  fmt='.2f',            # 2 decimal places
                  linewidths=0.5,       # Cell borders
                  cbar_kws={'label': 'Value'},  # Colorbar label
                  square=True)          # Square cells
      ```

      **When to Use Heatmaps:**
      - Correlation analysis
      - Confusion matrices
      - Time-based patterns (days × hours)
      - Geographic data
      - Any 2D grid of values

    examples:
      - title: "Basic Heatmap"
        code: |
          import matplotlib.pyplot as plt
          import seaborn as sns
          import numpy as np

          # Create sample data
          np.random.seed(42)
          data = np.random.rand(5, 5)

          plt.figure(figsize=(8, 6))
          sns.heatmap(data, annot=True, fmt='.2f', cmap='YlGnBu')
          plt.title('Basic Heatmap')
          plt.show()

        output: |
          [A 5x5 heatmap with numbers displayed in yellow-green-blue colors]

      - title: "Correlation Matrix"
        code: |
          import matplotlib.pyplot as plt
          import seaborn as sns
          import pandas as pd
          import numpy as np

          # Create sample dataset
          np.random.seed(42)
          df = pd.DataFrame({
              'Height': np.random.normal(170, 10, 100),
              'Weight': np.random.normal(70, 15, 100),
              'Age': np.random.randint(20, 60, 100),
              'Income': np.random.normal(50000, 20000, 100)
          })

          # Add correlated variable
          df['BMI'] = df['Weight'] / (df['Height']/100)**2

          # Calculate correlation matrix
          corr = df.corr()

          plt.figure(figsize=(10, 8))
          sns.heatmap(corr, annot=True, fmt='.2f', cmap='coolwarm',
                      center=0, square=True, linewidths=1)
          plt.title('Correlation Matrix')
          plt.tight_layout()
          plt.show()

        output: |
          [A correlation matrix heatmap with values from -1 to +1 in coolwarm colors]

      - title: "Different Color Maps"
        code: |
          import matplotlib.pyplot as plt
          import seaborn as sns
          import numpy as np

          np.random.seed(42)
          data = np.random.rand(4, 4)

          fig, axes = plt.subplots(2, 2, figsize=(12, 10))
          cmaps = ['viridis', 'YlOrRd', 'coolwarm', 'RdYlGn']

          for ax, cmap in zip(axes.flat, cmaps):
              sns.heatmap(data, annot=True, fmt='.2f', cmap=cmap, ax=ax)
              ax.set_title(f'Colormap: {cmap}')

          plt.tight_layout()
          plt.show()

        output: |
          [Four heatmaps showing the same data with different color schemes]

      - title: "Heatmap with Custom Formatting"
        code: |
          import matplotlib.pyplot as plt
          import seaborn as sns
          import pandas as pd

          # Sales data (products × months)
          sales = pd.DataFrame({
              'Jan': [120, 95, 150, 80],
              'Feb': [135, 105, 145, 90],
              'Mar': [150, 110, 160, 95],
              'Apr': [145, 100, 155, 88]
          }, index=['Product A', 'Product B', 'Product C', 'Product D'])

          plt.figure(figsize=(10, 6))
          sns.heatmap(sales, annot=True, fmt='d', cmap='Greens',
                      linewidths=2, linecolor='white',
                      cbar_kws={'label': 'Sales ($)'})
          plt.title('Monthly Sales by Product', fontsize=16, pad=20)
          plt.xlabel('Month', fontsize=12)
          plt.ylabel('Product', fontsize=12)
          plt.tight_layout()
          plt.show()

        output: |
          [A heatmap showing sales data with white grid lines and green coloring]

      - title: "Masked Correlation Matrix"
        code: |
          import matplotlib.pyplot as plt
          import seaborn as sns
          import pandas as pd
          import numpy as np

          # Create sample data
          np.random.seed(42)
          df = pd.DataFrame({
              'A': np.random.randn(50),
              'B': np.random.randn(50),
              'C': np.random.randn(50),
              'D': np.random.randn(50),
              'E': np.random.randn(50)
          })

          # Calculate correlation
          corr = df.corr()

          # Create mask for upper triangle
          mask = np.triu(np.ones_like(corr, dtype=bool))

          plt.figure(figsize=(10, 8))
          sns.heatmap(corr, mask=mask, annot=True, fmt='.2f',
                      cmap='coolwarm', center=0, square=True,
                      linewidths=1, cbar_kws={'shrink': 0.8})
          plt.title('Correlation Matrix (Lower Triangle Only)')
          plt.tight_layout()
          plt.show()

        output: |
          [A triangular correlation matrix showing only the lower half]

      - title: "Time-Based Heatmap"
        code: |
          import matplotlib.pyplot as plt
          import seaborn as sns
          import pandas as pd
          import numpy as np

          # Website traffic (hours × days)
          np.random.seed(42)
          hours = [f'{h:02d}:00' for h in range(0, 24, 4)]
          days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']

          traffic = np.random.randint(10, 100, size=(len(hours), len(days)))
          # Boost weekend traffic
          traffic[:, 5:] = traffic[:, 5:] * 1.3

          df = pd.DataFrame(traffic, index=hours, columns=days)

          plt.figure(figsize=(10, 6))
          sns.heatmap(df, annot=True, fmt='d', cmap='YlOrRd',
                      cbar_kws={'label': 'Visitors'})
          plt.title('Website Traffic Patterns')
          plt.xlabel('Day of Week')
          plt.ylabel('Time of Day')
          plt.tight_layout()
          plt.show()

        output: |
          [A heatmap showing traffic patterns across days and hours]

  exercise:
    title: "Create Correlation Heatmap"

    instruction: |
      Create a correlation matrix heatmap for the given DataFrame.

      **Requirements:**
      1. Calculate correlation matrix using df.corr()
      2. Create heatmap with:
         - annot=True (show values)
         - fmt='.2f' (2 decimal places)
         - cmap='coolwarm'
         - center=0 (center colormap at zero)
         - square=True (square cells)
      3. Add title 'Feature Correlation Matrix'

    setup_code: |
      import matplotlib.pyplot as plt
      import seaborn as sns
      import pandas as pd
      import numpy as np

      np.random.seed(42)
      df = pd.DataFrame({
          'Feature1': np.random.randn(100),
          'Feature2': np.random.randn(100),
          'Feature3': np.random.randn(100),
          'Feature4': np.random.randn(100)
      })

    starter_code: |
      # Your code here
      corr =
      plt.figure(figsize=(8, 6))

    solution: |
      corr = df.corr()
      plt.figure(figsize=(8, 6))
      sns.heatmap(corr, annot=True, fmt='.2f', cmap='coolwarm',
                  center=0, square=True)
      plt.title('Feature Correlation Matrix')

    validation:
      type: "plot_check"
      checks:
        - type: "has_heatmap"
          expected: true

    hints:
      - level: 1
        text: |
          Calculate correlation with df.corr().
          Use sns.heatmap() with the correlation matrix.
          Set annot=True, fmt='.2f', cmap='coolwarm', center=0, square=True.

      - level: 2
        text: |
          corr = df.corr()
          sns.heatmap(corr, annot=True, fmt='.2f', cmap='coolwarm',
                      center=0, square=True)
          plt.title('Feature Correlation Matrix')

      - level: 3
        code: |
          corr = df.corr()
          plt.figure(figsize=(8, 6))
          sns.heatmap(corr, annot=True, fmt='.2f', cmap='coolwarm',
                      center=0, square=True)
          plt.title('Feature Correlation Matrix')

  follow_up:
    challenges:
      - "Create masked triangular correlation matrix"
      - "Use different color maps and compare"
      - "Add cell borders with linewidths"
      - "Create heatmap from custom 2D data"

    next_lesson: "matplotlib_07"

    additional_resources:
      - title: "Seaborn Heatmap Documentation"
        url: "https://seaborn.pydata.org/generated/seaborn.heatmap.html"
      - title: "Matplotlib Colormaps"
        url: "https://matplotlib.org/stable/tutorials/colors/colormaps.html"
